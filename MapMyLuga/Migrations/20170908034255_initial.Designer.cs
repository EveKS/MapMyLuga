// <auto-generated />
using MapMyLuga.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MapMyLuga.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20170908034255_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MapMyLuga.Models.Map.Coordinate", b =>
                {
                    b.Property<string>("CoordinateId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CoordinateIndex");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("MessageInfoId");

                    b.HasKey("CoordinateId");

                    b.HasIndex("MessageInfoId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.DateAddObject", b =>
                {
                    b.Property<string>("DateAddObjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("TimeZone");

                    b.HasKey("DateAddObjectId");

                    b.ToTable("DateAddObjects");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.FileDetail", b =>
                {
                    b.Property<string>("FileDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FilesModelId");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.HasKey("FileDetailId");

                    b.HasIndex("FilesModelId");

                    b.ToTable("FileDetails");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.FilesModel", b =>
                {
                    b.Property<string>("FilesModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAddObjectId");

                    b.HasKey("FilesModelId");

                    b.HasIndex("DateAddObjectId");

                    b.ToTable("FilesModels");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.MarkerGroup", b =>
                {
                    b.Property<string>("MarkerGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName");

                    b.HasKey("MarkerGroupId");

                    b.ToTable("MarkerGroups");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.MessageInfo", b =>
                {
                    b.Property<string>("MessageInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAddObjectId");

                    b.Property<string>("Description");

                    b.Property<string>("FilesModelId");

                    b.Property<bool>("IsLine");

                    b.Property<string>("MarkerGroupId");

                    b.Property<string>("ObjectColor");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("MessageInfoId");

                    b.HasIndex("DateAddObjectId");

                    b.HasIndex("FilesModelId");

                    b.HasIndex("MarkerGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageInfos");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.Tag", b =>
                {
                    b.Property<string>("TagId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long>("UsingCount");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.TagToFile", b =>
                {
                    b.Property<string>("TagId");

                    b.Property<string>("FilesModelId");

                    b.Property<string>("TagToFileId")
                        .IsRequired();

                    b.HasKey("TagId", "FilesModelId");

                    b.HasAlternateKey("TagToFileId");

                    b.HasIndex("FilesModelId");

                    b.ToTable("TagToFile");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.TagToMessage", b =>
                {
                    b.Property<string>("TagId");

                    b.Property<string>("MessageInfoId");

                    b.Property<string>("TagToMessageId")
                        .IsRequired();

                    b.HasKey("TagId", "MessageInfoId");

                    b.HasAlternateKey("TagToMessageId");

                    b.HasIndex("MessageInfoId");

                    b.ToTable("TagToMessage");
                });

            modelBuilder.Entity("MapMyLuga.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FilesModelId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("FilesModelId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.Coordinate", b =>
                {
                    b.HasOne("MapMyLuga.Models.Map.MessageInfo", "MessageInfo")
                        .WithMany("Coordinates")
                        .HasForeignKey("MessageInfoId");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.FileDetail", b =>
                {
                    b.HasOne("MapMyLuga.Models.Map.FilesModel", "FilesModel")
                        .WithMany("FileDetails")
                        .HasForeignKey("FilesModelId");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.FilesModel", b =>
                {
                    b.HasOne("MapMyLuga.Models.Map.DateAddObject", "DateAddObject")
                        .WithMany("FilesModels")
                        .HasForeignKey("DateAddObjectId");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.MessageInfo", b =>
                {
                    b.HasOne("MapMyLuga.Models.Map.DateAddObject", "DateAddObject")
                        .WithMany("MessageInfos")
                        .HasForeignKey("DateAddObjectId");

                    b.HasOne("MapMyLuga.Models.Map.FilesModel", "FilesModel")
                        .WithMany("MessageInfos")
                        .HasForeignKey("FilesModelId");

                    b.HasOne("MapMyLuga.Models.Map.MarkerGroup", "MarkerGroup")
                        .WithMany("MessageInfos")
                        .HasForeignKey("MarkerGroupId");

                    b.HasOne("MapMyLuga.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.TagToFile", b =>
                {
                    b.HasOne("MapMyLuga.Models.Map.FilesModel", "FilesModel")
                        .WithMany("TagToFile")
                        .HasForeignKey("FilesModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MapMyLuga.Models.Map.Tag", "Tag")
                        .WithMany("TagToFile")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MapMyLuga.Models.Map.TagToMessage", b =>
                {
                    b.HasOne("MapMyLuga.Models.Map.MessageInfo", "MessageInfo")
                        .WithMany("TagToMessage")
                        .HasForeignKey("MessageInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MapMyLuga.Models.Map.Tag", "Tag")
                        .WithMany("TagToMessage")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MapMyLuga.Models.User", b =>
                {
                    b.HasOne("MapMyLuga.Models.Map.FilesModel")
                        .WithMany("Users")
                        .HasForeignKey("FilesModelId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MapMyLuga.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MapMyLuga.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MapMyLuga.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MapMyLuga.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
